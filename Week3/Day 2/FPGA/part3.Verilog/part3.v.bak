// Real time settable Clock showing MM SS HH (minutes, seconds, hundredths of a second
// Set SW[7:0] to 2-digit number representing minutes
// Load initial time by pressing KEY[1]
// Start/stop the clock by pressing KEY[0]
module part3 (CLOCK_50, SW, KEY, HEX5, HEX4, HEX3, HEX2, HEX1, HEX0);
	/******************************************************************/
	/****      PORT DECLARATIONS                                   ****/
	/******************************************************************/
	input CLOCK_50;
	input [7:0] SW;
	input [1:0] KEY;
	output [0:6] HEX5, HEX4, HEX3, HEX2, HEX1, HEX0;

	/******************************************************************/
	/****      WIRE DECLARATIONS                                   ****/
	/******************************************************************/
	wire one_Hundredth;
	wire [3:0] H1, H0;	// HH
	wire [3:0] S1, S0;	// SS
	wire [3:0] M1, M0;	// MM
	wire roll_H0, roll_H1, roll_S0, roll_S1, roll_M0, roll_M1;
	wire en_H0, en_H1, en_S0, en_S1, en_M0, en_M1;
	
	/******************************************************************/
	/****      IMPLEMENTATION                                      ****/
	/******************************************************************/
	modulo_counter_er slow_Clock (.Clock(CLOCK_50), .Reset_n(KEY[1]),
		.enable(KEY[0]), .rollover(one_Hundredth));
		defparam slow_Clock.n = 27;
		defparam slow_Clock.k = 500000;
	
	assign en_H0 = one_Hundredth;
	modulo_counter_er U_H0 (CLOCK_50, KEY[1], en_H0, H0, roll_H0);	
		defparam U_H0.n = 4;
		defparam U_H0.k = 10;

	assign en_H1 = one_Hundredth & roll_H0;
	modulo_counter_er U_H1 (CLOCK_50, KEY[1], en_H1, H1, roll_H1);	
		defparam U_H1.n = 4;
		defparam U_H1.k = 10;

	assign en_S0 = en_H1 & roll_H1;
	modulo_counter_er U_S0(CLOCK_50, KEY[1], en_S0, S0, roll_S0);	
		defparam U_S0.n = 4;
		defparam U_S0.k = 10;

	assign en_S1 = en_S0 & roll_S0;
	modulo_counter_er U_S1(CLOCK_50, KEY[1], en_S1, S1, roll_S1);	
		defparam U_S1.n = 4;
		defparam U_S1.k = 6;
		
	assign en_M0 = (en_S1 & roll_S1) | ~KEY[1];
	modulo_counter_sler U_M0(CLOCK_50, 1'b0, ~KEY[1], en_M0, SW[3:0], M0, roll_M0);
		defparam U_M0.n = 4;
		defparam U_M0.k = 10;

	assign en_M1 = (en_M0 & roll_M0) | ~KEY[1];
	modulo_counter_sler U_M1(CLOCK_50, 1'b0, ~KEY[1], en_M1, SW[7:4], M1, roll_M1);
		defparam U_M1.n = 4;
		defparam U_M1.k = 6;			
	
	// drive the displays
	bcd7seg digit5 (M1, HEX5);
	bcd7seg digit4 (M0, HEX4);
	bcd7seg digit3 (S1, HEX3);
	bcd7seg digit2 (S0, HEX2);
	bcd7seg digit1 (H1, HEX1);
	bcd7seg digit0 (H0, HEX0);
endmodule
			
module modulo_counter_er (Clock, Reset_n, enable, Q, rollover);
	/******************************************************************/
	/****      PARAMETER DECLARATIONS                              ****/
	/******************************************************************/
	parameter n = 4;
	parameter k = 16;
	
	/******************************************************************/
	/****      PORT DECLARATIONS                                   ****/
	/******************************************************************/
	input 		Clock, Reset_n, enable;
	output		rollover;
	output reg	[n-1:0] Q;
	
	/******************************************************************/
	/****      IMPLEMENTATION                                      ****/
	/******************************************************************/
	always @ (posedge Clock or negedge Reset_n)
		if (~Reset_n)
			Q <= 'd0;
		else if (enable)
		begin
			if (Q == k-1)
				Q <= 'd0;
			else
				Q <= Q + 1'b1;
		end
				
	assign rollover = (Q == k-1);	
endmodule


module modulo_counter_sler(Clock, reset, load, enable, data, Q, rollover);
	/******************************************************************/
	/****      PARAMETER DECLARATIONS                              ****/
	/******************************************************************/
	parameter n = 4;
	parameter k = 16;
	
	/******************************************************************/
	/****      PORT DECLARATIONS                                   ****/
	/******************************************************************/
	input 	Clock, reset, load, enable;
	input		[n-1:0] data;
	output reg	[n-1:0] Q;
	output		rollover;
	
	/******************************************************************/
	/****      IMPLEMENTATION                                      ****/
	/******************************************************************/
	always @ (posedge Clock)
		if (enable)
			if (reset)
				Q <= 'd0;
			else if (load)
				Q <= data;
			else
			begin
				if (Q == k-1)
					Q <= 'd0;
				else
					Q <= Q + 1'b1;
			end
				
	assign rollover = (Q == k-1);	
endmodule


module bcd7seg (bcd, display);
	/******************************************************************/
	/****      PORT DECLARATIONS                                   ****/
	/******************************************************************/
	input [3:0] bcd;
	output reg [0:6] display;
	
	/******************************************************************/
	/****      IMPLEMENTATION                                      ****/
	/******************************************************************/
	/*
	 *       0  
	 *      ---  
	 *     |   |
	 *    5|   |1
	 *     | 6 |
	 *      ---  
	 *     |   |
	 *    4|   |2
	 *     |   |
	 *      ---  
	 *       3  
	 */
	always @ (bcd)
		case (bcd)
			4'h0: display = 7'b0000001;
			4'h1: display = 7'b1001111;
			4'h2: display = 7'b0010010;
			4'h3: display = 7'b0000110;
			4'h4: display = 7'b1001100;
			4'h5: display = 7'b0100100;
			4'h6: display = 7'b0100000;
			4'h7: display = 7'b0001111;
			4'h8: display = 7'b0000000;
			4'h9: display = 7'b0000100;
			default: display = 7'b1111111;
		endcase
endmodule
