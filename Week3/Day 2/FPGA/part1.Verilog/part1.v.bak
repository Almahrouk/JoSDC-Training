// 8-bit modulo-k counter
module part1 (KEY, LEDR);
	/******************************************************************/
	/****      PORT DECLARATIONS                                   ****/
	/******************************************************************/
	input [1:0] KEY;
	output [9:0] LEDR;
	
	/******************************************************************/
	/****      IMPLEMENTATION                                      ****/
	/******************************************************************/
	modulo_counter my_counter (.Clock(KEY[1]), .Reset_n(KEY[0]),
		.Q(LEDR[7:0]), .rollover(LEDR[9]));
		defparam my_counter.n = 5;
		defparam my_counter.k = 20;

	assign LEDR[8] = 1'b0;
	
endmodule
			
module modulo_counter (Clock, Reset_n, Q, rollover);
	/******************************************************************/
	/****      PARAMETER DECLARATIONS                              ****/
	/******************************************************************/
	parameter n = 4;
	parameter k = 16;
	
	/******************************************************************/
	/****      PORT DECLARATIONS                                   ****/
	/******************************************************************/
	input 	Clock, Reset_n;
	output reg	[n-1:0] Q;
	output rollover;
	
	/******************************************************************/
	/****      IMPLEMENTATION                                      ****/
	/******************************************************************/
	always @ (posedge Clock or negedge Reset_n)
		if (!Reset_n)
			Q <= 'd0;
		else
			if (Q == k-1)
				Q <= 'd0;
			else
				Q <= Q + 1'b1;	
	 assign rollover = (Q == k-1) ? 1'b1 : 1'b0;
endmodule
	
